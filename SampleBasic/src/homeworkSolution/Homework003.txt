/*----------------------------------------------------------------------------------------------------------------------
     Homework-003
	 verilen ders: 13-21-03-2021
	 çözülen ders: --

    1. abc üç basamaklı bir tamsayıdır ve aşağıdaki koşulları sağlamaktadır:
    koşul 1 cba > abc olacak
    koşul 2 abc asal sayı olacak
    koşul 3 cba asal sayı olacak
    koşul 4 ab asal sayı olacak
    koşul 5 bc asal sayı olacak
    koşul 6 cb asal sayı olacak
    koşul 7 ba asal sayı olacak

    113 sayısı bu koşulları sağlamaktadır!

    koşul 1 cba > abc olacak 311 > 113
    koşul 2 abc asal sayı olacak 113 asal
    koşul 3 cba asal sayı olacak 311 asal
    koşul 4 ab asal sayı olacak 11 asal
    koşul 5 bc asal sayı olacak 13 asal
    koşul 6 cb asal sayı olacak 31 asal
    koşul 7 ba asal sayı olacak 11 asal
    Yukarıdaki koşulların hepsini sağlayan tüm abc sayılarını bulan programı yazınız.

    2. Aşağıda açıklanan isPrimeX isimli metodu yazınız:
    isPrimeX metodu içerisinde, gönderilen argumanın asal olup olmadığı test edilecek, eğer sayı asal ise bu kez sayının
    basamak değerleri toplanarak elde edilen sayının asal olup olmadığı test edilecektir. Bu işlem sonuçta tek basamaklı bir sayı
    kalana kadar devam edilecektir. Eğer en son elde edilen tek basamaklı sayı dahil tüm sayılar asal ise isPrimeX metodu true
    değerine geri dönecektir. Eğer herhangi bir kademede asal olmayan bir sayı elde edilirse metot false değerine geri
    dönecektir.

    3. Bir sayısının basamaksal kökünü bulan calculateDigitalRoot isimli metodu yazınız ve test ediniz
    Açıklamalar:
    • Bir sayının basamaksal kökü tüm basamaklarının toplanması ile elde edilen sayıdır. Basamakları toplama işlemi,
    tek basamaklı bir sayı elde edilene kadar sürdürülür:
    36987 -> 3 + 6 + 9 + 8 + 7 = 33
    33 -> 3 + 3 = 6 -> basamaksal kök

    4. Pozitif bir sayının factorian sayısı olup olmadığını test eden isFactorian isimli metodu yazınız ve test ediniz.
    Açıklamalar:
    • Basamaklarının faktoriyelleri toplamı kendisine eşit olan sayıya factorian denir.
    • Sayma sayılarında (pozitif sayılarda) 4 tane factorian sayı vardır. Bunlardan ilk ikisi şüphesiz 1 ve 2'dir.
    • Diğerlerini de bulan test kodunu yazınız.
    • İpucu: Kalan iki sayı da 100000 değerinden küçüktür.

    5. Aşağıdaki açıklamalara göre bir tamsayının super asal (super prime) olup olmadığını test eden isSuperPrime isimli
    metodu yazınız ve test ediniz.
    Not: Super asal sayılara asal indeksli asal sayılar (prime indexed primes) da denir
    Açıklamalar:
    • Tüm asal sayıların 1 değerinden başlayarak indeklendiğini düşünelim:
    1 -> 2
    2 -> 3 *
    3 -> 5 *
    4 -> 7
    5 -> 11 *
    6 -> 13
    7 -> 17 *
    ...
    Eğer asal sayının indeksi de yani kaçıncı asal sayı olduğu da asal ise bu sayı super asal sayıdır

    6. n pozitif bir tamsayı üzere ve a, b, c, d birbirinden farklı pozitif tamsayılar olmak üzere eğer
    n = a ^ 3 + b ^ 3 = c ^ 3 + d ^ 3
    eşitliğini sağlayacak şekilde a, b, c ve d tamsayıları var ise n bir Hardy-Ramanujan sayısıdır:
    1729 = 9 ^ 3 + 10 ^ 3 = 1 ^ 3 + 12 ^ 3
    Buna göre 100000'den küçük olan tüm Hardy-Ramanujan sayılarını ekrana bastıran programı yazınız.

    7. Parametresi ile aldığı int türden bir sayının 10'luk sistemde Harshad sayısı olup olmadığını test eden isDecimalHarshad
    isimli metodu NumberUtil sınıfı içerisinde yazınız ve test ediniz.
    Açıklamalar:
    • Basamaklarının toplamına bölünebilen sayılara Harshad (Niven) sayılar denir
    • Metot negatif sayılar için false değerine dönecektir

    8. Parametresi ile aldığı int türden bir sayının Collatz serisine ilişkin sayılarını ekrana basan displayCollatz metodunu
    yazınız.
    Açıklamalar:
    • Collatz conjecture: n bir pozitif tamsayı olmak üzere her yeni n değeri için aşağıdaki kurallar uygulanacaktır:
    - n, 1 değerine eşit ise işlemler sonlandırılacaktır
    - n çift ise yeni n değeri olarak n / 2, n tek ise yeni n değeri olarak 3 * n + 1 alınacaktır
    Örnek:
    72543 217630 108815 326446 163223 489670 244835 734506 367253 1101760
    550880 275440 137720 68860 34430 17215 51646 25823 77470 38735 116206
    58103 174310 87155 261466 130733 392200 196100 98050 49025 147076 73538
    36769 110308 55154 27577 82732 41366 20683 62050 31025 93076 46538 23269
    69808 34904 17452 8726 4363 13090 6545 19636 9818 4909 14728 7364 3682
    1841 5524 2762 1381 4144 2072 1036 518 259 778 389 1168 584 292 146 73
    220 110 55 166 83 250 125 376 188 94 47 142 71 214 107 322 161 484 242
    121 364 182 91 274 137 412 206 103 310 155 466 233 700 350 175 526 263
    790 395 1186 593 1780 890 445 1336 668 334 167 502 251 754 377 1132 566
    283 850 425 1276 638 319 958 479 1438 719 2158 1079 3238 1619 4858 2429
    7288 3644 1822 911 2734 1367 4102 2051 6154 3077 9232 4616 2308 1154 577
    1732 866 433 1300 650 325 976 488 244 122 61 184 92 46 23 70 35 106 53
    160 80 40 20 10 5 16 8 4 2 1

    C ve Sistem Programcıları Derneği
    Java ile Nesne Yönelimli Programlama
    Çalışma Soruları

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	 Question-01
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class FindPrimesOfThreeDigitsNumber {
    public static void run()
    {

        for (int i = 100; i < 1000; ++i)
            if (checkConditions(i))
                System.out.printf("%d ",i);

    }

    public static boolean checkConditions (int val)
    {
        int cba = 100 * (val % 10) + val / 10;

        if (val > cba)
            return false;

        if (!isPrime(val) || !isPrime(cba))
            return false;

        if (!isPrime(val / 10) || !isPrime(val % 100))
            return false;

        if (!isPrime(cba / 10) || !isPrime(cba % 100))
            return false;

        return true;
    }

    public static boolean isPrime(long val)
    {
        if (val <= 1)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }

}
/*----------------------------------------------------------------------------------------------------------------------
	 Question-02
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class NumberUtil {

    public static boolean isPrimeX(int val)
    {
        while (isPrime(val)) {
            if (val < 10)
                return true;

            val = digitsSum(val);
        }

        return false;
    }
    public static int digitsSum(int val)
    {
        int sum = 0;

        while (val != 0) {
            sum += val % 10;
            val /= 10;
        }

        return sum;
    }
    public static boolean isPrime(long val)
    {
        if (val <= 1)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }

}

/*----------------------------------------------------------------------------------------------------------------------
	 Question-03
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/


class NumberUtil {

    public static int calculateDigitalRoot(int val)
    {
        while ((val = digitsSum(val)) > 10)
            ;

        return val;
    }
    public static int digitsSum(int val)
    {
        int sum = 0;

        while (val != 0) {
            sum += val % 10;
            val /= 10;
        }

        return sum;
    }

}
/*----------------------------------------------------------------------------------------------------------------------
	 Question-04
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsFactorianTest {
    public static void run()
    {

        for (int i = 1;i < 100000; ++i) {
            if (NumberUtil.isFactorian(i))
                System.out.printf("%d ",i);
        }
    }

}

class NumberUtil {
    public static boolean isFactorian(int val)
    {
        return val == getDigitsFactorialSum(val);
    }
    public static int getDigitsFactorialSum(int val)
    {
        int result = 0;

        while (val != 0) {
            result += factorial(val % 10);
            val /= 10;
        }

        return result;
    }
    public static int factorial(int val)
    {
        int result = 1;
        for (int i = 2; i <= val; ++i)
            result *= i;

        return result;
    }

}

/*----------------------------------------------------------------------------------------------------------------------
	 Question-05
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class NumberUtil {

    public static boolean isSuperPrime(int val)
    {
        if (!isPrime(val))
            return false;

        int primeNum = 2;
        int i;
        for ( i = 0; primeNum <= val; ) {
            if (isPrime(primeNum))
                ++i;
            ++primeNum;
        }

        return isPrime(i);
    }
    public static boolean isPrime(long val)
    {
        if (val <= 1)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	 Question-06
	 çözüm tarihi:08.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsHardyRamanujanNumberTest {
    public static void run()
    {

        for (int i = 1;i < 100000; ++i) {
            if (NumberUtil.isHardyRamanujanNumber(i))
                System.out.printf("%d %n",i);
        }
    }

}

class NumberUtil {
    public static boolean isHardyRamanujanNumber(int n)
    {
        int count = 0;
        int  b, temp = 0;

        for (int i = 1; ; ++i) {
            int cubeOfi = (int)Math.pow(i, 3);

            if (cubeOfi > n)
                return false;

            if ((b = getCubeRootOfNumber(n - cubeOfi)) != -1 && b != temp) {
                ++count;
                temp = i;
            }
            if (count == 2)
                return true;
        }
    }
    public static int  getCubeRootOfNumber(int val)
    {
        for (int i = 1;Math.pow(i,3) <= val; ++i)
            if (Math.pow(i,3) == val)
                return i;

        return -1;
    }
}
