/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı double türden x1, y1, x2, y2 koordinat bilgilerine göre iki nokta
	arasındaki  ((x1, y1) ve (x2, y2)) uzaklığa geri dönen distance isimli metodu PointUtil isimli sınıf içerisinde
	yazınız	ve klavyeden girilen değerlerle çağırarak test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class PointUtil {
    public static double distance(double x1, double y1, double x2, double y2)
    {
        return Math.sqrt(Math.pow(x1 - x2,2) + Math.pow(y1 - y2,2));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı en fazla 3(üç) basamaklı int türden bir sayının basamakları toplamını döndüren
	digitsSum metodunu döngü kullanmadan yazınız. Metot aldığı argümanın en fazla 3(üç) basamaklı olup olmadığını kontrol
	etmeyecektir. Basmaklar toplamı pozitif olarak döndürülecektir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class NumberUtil {
    public static int digitSum(int val)
    {
        int sum = val % 10;
        sum += val / 10 % 10;
        sum += val /100;

        return Math.abs(sum);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: Katsayıları klavyeden girilen ikinci dereceden bir denklemin köklerini bulup ekrana yazdıran
	 programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class EquationSolver {
    public static double findDelta(double a, double b, double c)
    {
        return b * b - 4 * a * c;
    }

    public static void root(double a, double b, double c)
    {
        double delta = findDelta(a, b, c);

        if (delta < 0)
            System.out.print("gerçek kök yok%n");

        else if (delta == 0) {
            double x = -b / 2 * a;
            System.out.printf("x1 = x2 = %f%n", x);
        }
        else if (delta > 0) {
            double x1 = (-b + Math.sqrt(delta)) / 2 * a;
            double x2 = (-b - Math.sqrt(delta)) / 2 * a;
            System.out.printf("x1 = %f%nx2 = %f%n", x1, x2);
        }

    }

 }

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Klavyeden sıfır girilene kadar alınan sayıların pozitif ve negatif olanlarının ayrı ayrı toplamını
 	bulan programı yazınız. Programda hiç negatif veya pozitif sayı girilmemişse uygun mesajlar verilmelidir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class FindPosNegSumApp {
    public static void run ()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);
        int val;
        int posSum = 0, negSum = 0;

        while ((val = Integer.parseInt(kb.nextLine())) != 0)
        {
            if (val < 0)
                negSum += val;
            else
                posSum += val;
        }
        display(posSum, negSum);
    }

    public static void display(int posSum, int negSum)
    {
        if (posSum == 0)
            System.out.println("pozitif değer girilmedi.");
        else
            System.out.printf("pozitif değerler toplam: %d%n", posSum);

        if (negSum == 0)
            System.out.println("negatif değer girilmedi.");
        else
            System.out.printf("negatif değerler toplam: %d%n", negSum);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Yukarıdaki örnekte pozitif negatif sayılardan kaç tane girildiğini de bulan şekilde programı
 	güncelleyiniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class FindPosNegSumApp {
    public static void run ()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);
        int val;
        int posSum = 0, negSum = 0;
        int posCount = 0, negCount = 0;

        System.out.println("Sayıları girmeye başlayınız..");

        while ((val = Integer.parseInt(kb.nextLine())) != 0)
        {
            if (val < 0) {
                negSum += val;
                ++negCount;
            }
            else {
                posSum += val;
                ++posCount;
            }
        }
        display(posSum, negSum,posCount,negCount);
    }

    public static void display(int posSum, int negSum,int posCount, int negCount)
    {

        if (posSum == 0)
            System.out.println("pozitif değer girilmedi.");
        else
            System.out.printf("%d pozitif sayı girildi, sayılar toplamı: %d%n",posCount, posSum);

        if (negSum == 0)
            System.out.println("negatif değer girilmedi.");
        else
            System.out.printf("%d negatif sayı girildi, sayılar toplamı: %d%n",negCount, negSum);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının basamak sayısını döndüren countDigits isimli metodu
 	NumberUtil isimli sınıf içerisinde yazınız ve aşağıdaki kod ile test ediniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class CountDigitsTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.countDigits(val);

            System.out.printf("%d sayısının basamak sayısı:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının basamak sayısı:%d%n", NumberUtil.countDigits(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {
    public static int countDigits(int val)
    {
        val = Math.abs(val);
        int count = 0;

        if (val < 10)
            return ++count;

        while (val != 0) {
            val /= 10;
            ++count;
        }

        return count;
    }
}
class NumberUtil {
	public static int countDigits(int val)
	{
		int count = 0;

		do {
			++count;
			val /= 10;
		} while (val != 0);

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının basamakları toplamını döndüren sumDigits isimli metodu
 	NumberUtil isimli sınıf içerisinde yazınız ve aşağıdaki kod ile test ediniz. Metot negatif sayılar için basamakları
 	toplamını pozitif olarak döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class SumDigitsTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.sumDigits(val);

            System.out.printf("%d sayısının basamakları toplamı:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının basamakları toplamı:%d%n", NumberUtil.sumDigits(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int sumDigits(int val)
    {
        val = Math.abs(val);

        int sum = 0;
        while (val != 0) {
            sum += val % 10;
            val /= 10;
        }

        return sum;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının tersini döndüren reversed isimli metodu NUmberUtil
 	sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.

 	123 -> 3 -> 3 * 10 + 2 = 32 -> 32 * 10 + 1 = 321
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class ReversedTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.reversed(val);

            System.out.printf("%d sayısının tersi:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının tersi:%d%n", NumberUtil.reversed(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int reversed(int val)
    {
        int result = 0;

        while (val != 0) {
            result = result *  10 + val % 10;
            val /= 10;
        }

        return result;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden a ve b değerleri için a'nın b-inci kuvvetini döndüren
 	pow isimli metodu NumberUtil sınıfı içerisinde yazınız.
 	 	Açıklamalar:
 	 	- Math sınıfının pow metodu kullanılmayacaktır
 	 	- Metot b'nin negatif değerleri için 1 değerine geri dönecektir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class ReversedTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        while (true) {
            System.out.print("tabanı giriniz:");
            int a = Integer.parseInt(kb.nextLine());

            if(a == 0)
                break;

            System.out.print("üstü giriniz:");
            int b = Integer.parseInt(kb.nextLine());
            System.out.printf("%d üzeri %d = %d%n", a, b, NumberUtil.pow(a,b));
        }
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int pow(int a, int b)
    {
        if (b < 0)
            return 1;

        int result = 1;

        for (int i = 0; i < b; ++i)
            result *= a;

        return result;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı bir sayının Armstrong sayısı olup olmadığını test eden isArmstrong isimli
 	metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
 	 	 Açıklamalar:
 	 	 - Bir sayının her basamağının sayının basamak sayıncı kuvvetleri toplandığında sonuç sayının kendisine eşitse bu sayıya
 	 	 Armstrong sayısı denir. Örneğin:

 	 	 153 -> 1 * 1 * 1 + 5 * 5 * 5 + 3 * 3 * 3 = 153

 	 	 - Kuvvet alma işlemi için yukarıda yazılmış olan pow metodu kullanılacaktır

 	 	 - Sayı negatif ise Armstrong sayısı kabul etmeyiniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsArmstrongTest {
    public static void run()
    {
        for (int n = 0; n <= 9999999; ++n)
            if (NumberUtil.isArmstrong(n))
                System.out.println(n);
    }
}

class NumberUtil {
    public static boolean isArmstrong(int val)
    {
        if (val < 0)
            return false;

        int temp = val;
        int result = 0;
        int countDigits = countDigits(val);

        while (temp != 0) {
            result += pow(temp % 10, countDigits);
            temp /= 10;
        }

        if(val == result)
            return true;

        return false;
    }
    public static int pow(int a, int b)
    {
        int result = 1;

        while (b-- > 0)
            result *= a;

        return result;
    }
    public static int countDigits(int val)
    {
        int count = 0;

        do {
            ++count;
            val /= 10;
        } while (val != 0);

        return count;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı long türden bir sayının asal olup olmadığını test eden isPrime isimli
 	metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
 	Kural: Bir sayı karekökünden küçük olan asal sayıların hiç birisine bölünemiyorsa asaldır.
 	(Hızlı versiyon)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsPrimeTest {
    public static void run()
    {
        for (int i = -10; i <= 100; ++i)
            if (NumberUtil.isPrime(i))
                System.out.printf("%d ", i);

        System.out.println();
        System.out.println(NumberUtil.isPrime(1_000_003));

        System.out.println(NumberUtil.isPrime(3_728_803_592_870_153_407L));
    }
}

class NumberUtil {
    public static boolean isPrime(long val)
    {
        if (val < 2)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir n değeri için n-inci asal sayıyı döndüren getPrime
 	isimli metodu yazınız ve aşağıdaki kod ile test ediniz.
 	Açıklamalar:
 		- isPrime metodunu kullanınız
 	  	- isPrime metodunun hızlı olan versiyonunu kullandığınız bilinciyle yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class GetPrimeTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());


            if (n < 1)
                return;

            System.out.printf("%d. asal sayı:%d%n", n, NumberUtil.getPrime(n));
        }
    }
}

class NumberUtil {
    public static int getPrime(int n)
    {
        int count = 0;
        int result = 0;

        for (int i = 2; count != n; ++i)
            if (isPrime(i)) {
                ++count;
                result = i;
            }

        return result;

    }

    public static boolean isPrime(long val)
    {
        if (val < 2)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının faktoriyel değerini döndüren factorial isimli
	metodu NumberUtil sınıfı içersinde yazınız ve aşağıdaki kodu ile test ediniz.

	0! = 1
	1! = 1
	1! 1 * 2

	...

	n! = 1 * 2 * ... * (n - 1) * n
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class FactorialTest {
    public static void run()
    {
        int n = 13;

        for (int i = 0; i <= n; ++i)
            System.out.printf("%d! = %d%n", i, NumberUtil.factorial(i));
    }
}

class NumberUtil {
    public static int factorial(int val)
    {
        int result = 1;

        for (int i = 2; i <= val; ++i)
            result *= i;

        return result;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı n sayısı için n-inci Fibonacci sayısını döndüren getFibonacciNumber
	isimli metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
	Açıklama:
		- Fibonacci sayıları:
		0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class GetFibonnaciTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());


            if (n < 1)
                break;

            System.out.printf("%d. Fibonacci sayısı:%d%n", n, NumberUtil.getFibonacciNumber(n));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {
    public static int getFibonacciNumber(int n)
    {

        if (val < 0)
        	return 0;

        int prev2 = 0, prev1 = 1;

        if (n < 2)
            return n - 1;

        for (int i = 2; i < n; ++i) {
             int temp = prev1;
             prev1 += prev2;
             prev2 = temp;
        }

        return prev1;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden sayıdan büyük ilk Fibonacci sayısına geri dönen
	getNextFibonacciNumber isimli metodu yazınız ve aşağıdaki kod ile test ediniz

	0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class GetNextFibonnaciTest {
    public static void run()
    {
        java.util.Scanner kb = new java.util.Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());


            if (n < -999)
                break;

            System.out.printf("%d sayısından büyük ilk Fibonacci sayısı:%d%n", n, NumberUtil.getNextFibonacciNumber(n));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {

    public static int getNextFibonacciNumber(int val)
    {
        if (val < 0)
            return 0;

        int prev2 = 0, prev1 = 1;
        int result = prev1 + prev2;

        for (;;) {

            prev2 = prev1;
            prev1 = result;

            if (result > val )
                return result;

            result = prev1 + prev2;
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden yıl değerinin artık yıl olup olmadığını test eden isLeapYear
	isimli metodu yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin geçerli bir tarih
	olup olmadığını test eden isValidDate isimli metodu yazınız aşağıdaki kod ile test ediniz
	(İleride daha iyi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin geçerli bir tarih
	olup olmadığını test eden isValidDate isimli metodu yazınız aşağıdaki kod ile test ediniz
	(İleride daha iyi yazılacaktır)

	Not: Buradaki kodun yukarıdaki kod ile okunabilirlik/algılanabilirlik açısından bir farkı yoktur
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin yılın kaçıncı
	günü olduğunu döndüren getDayOfYear metodu yazınız ve aşağıdaki kod ile test ediniz.
	Açıklamalar:
		- Metot geçersiz bir tarih durumunda -1 değerine geri dönecektir
		- Örnekler:
		01.03.2020 -> 1 + 29 + 31 = 61
		01.03.2021 -> 1 + 28 + 31 = 60
		31.12.202 -> 31 + 30 + ... + 29 + 31 = 366
		31.12.2020 -> 31 + 30 + ... + 28 + 31 = 365
	(İleride daha iyisi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin aşağıdaki açıklamalara
	göre haftanın hangi gününe geldiğini döndüren getDayOfWeek isimli metodu yazınız ve aşağıdaki kod ile test ediniz
	Açıklamalar:
		- Metot geçersiz bir tarih durumunda -1 değerine geri dönecektir
		- Haftanın günü 1.1.1900 ile verilen tariharasındaki (verilen tarih dahil) gün sayısının 7(yedi) ile bölümünden
		elde edilen kalan ile bulunabilir. Değer 0(sıfır) ise "Pazar", 1(bir) ise "Pazartesi", ... 6(altı) ise "Cumartesi"
		günlerine karşılık gelir
		- 1.1.1900 öncesindeki tarihler geçersizler kabul edilir
		- Parametresi ile aldığı gün, ay ve yıl bilgilerine ilişkin tarihin hafta sonu olup olmadığını test eden isWeekend
		ve hafta içi olup olmadığını test eden isWeekday metotlarını yazınız. Metotlar tarih geçerliliği kontrolü yapmayacaktır
	(İleride daha iyisi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/

