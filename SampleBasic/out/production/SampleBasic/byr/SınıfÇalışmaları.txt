/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı double türden x1, y1, x2, y2 koordinat bilgilerine göre iki nokta
	arasındaki  ((x1, y1) ve (x2, y2)) uzaklığa geri dönen distance isimli metodu PointUtil isimli sınıf içerisinde
	yazınız	ve klavyeden girilen değerlerle çağırarak test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class PointUtil {
    public static double distance(double x1, double y1, double x2, double y2)
    {
        return Math.sqrt(Math.pow(x1 - x2,2) + Math.pow(y1 - y2,2));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı en fazla 3(üç) basamaklı int türden bir sayının basamakları toplamını döndüren
	digitsSum metodunu döngü kullanmadan yazınız. Metot aldığı argümanın en fazla 3(üç) basamaklı olup olmadığını kontrol
	etmeyecektir. Basmaklar toplamı pozitif olarak döndürülecektir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class NumberUtil {
    public static int digitSum(int val)
    {
        int sum = val % 10;
        sum += val / 10 % 10;
        sum += val /100;

        return Math.abs(sum);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: Katsayıları klavyeden girilen ikinci dereceden bir denklemin köklerini bulup ekrana yazdıran
	 programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class EquationSolver {
    public static double findDelta(double a, double b, double c)
    {
        return b * b - 4 * a * c;
    }

    public static void root(double a, double b, double c)
    {
        double delta = findDelta(a, b, c);

        if (delta < 0)
            System.out.print("gerçek kök yok%n");

        else if (delta == 0) {
            double x = -b / 2 * a;
            System.out.printf("x1 = x2 = %f%n", x);
        }
        else if (delta > 0) {
            double x1 = (-b + Math.sqrt(delta)) / 2 * a;
            double x2 = (-b - Math.sqrt(delta)) / 2 * a;
            System.out.printf("x1 = %f%nx2 = %f%n", x1, x2);
        }

    }

 }

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Klavyeden sıfır girilene kadar alınan sayıların pozitif ve negatif olanlarının ayrı ayrı toplamını
 	bulan programı yazınız. Programda hiç negatif veya pozitif sayı girilmemişse uygun mesajlar verilmelidir.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 25.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        FindPosNegSumApp.run();
    }
}
class FindPosNegSumApp {
    public static void run ()
    {
        Scanner kb = new Scanner(System.in);
        int val;
        int posSum = 0, negSum = 0;

        while ((val = Integer.parseInt(kb.nextLine())) != 0)
        {
            if (val < 0)
                negSum += val;
            else
                posSum += val;
        }
        display(posSum, negSum);
    }

    public static void display(int posSum, int negSum)
    {
        if (posSum == 0)
            System.out.println("pozitif değer girilmedi.");
        else
            System.out.printf("pozitif değerler toplam: %d%n", posSum);

        if (negSum == 0)
            System.out.println("negatif değer girilmedi.");
        else
            System.out.printf("negatif değerler toplam: %d%n", negSum);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Yukarıdaki örnekte pozitif negatif sayılardan kaç tane girildiğini de bulan şekilde programı
 	güncelleyiniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        FindPosNegSumApp.run();
    }
}
class FindPosNegSumApp {
    public static void run ()
    {
        Scanner kb = new Scanner(System.in);
        int val;
        int posSum = 0, negSum = 0;
        int posCount = 0, negCount = 0;

        System.out.println("Sayıları girmeye başlayınız..");

        while ((val = Integer.parseInt(kb.nextLine())) != 0)
        {
            if (val < 0) {
                negSum += val;
                ++negCount;
            }
            else {
                posSum += val;
                ++posCount;
            }
        }
        display(posSum, negSum,posCount,negCount);
    }

    public static void display(int posSum, int negSum,int posCount, int negCount)
    {

        if (posSum == 0)
            System.out.println("pozitif değer girilmedi.");
        else
            System.out.printf("%d pozitif sayı girildi, sayılar toplamı: %d%n",posCount, posSum);

        if (negSum == 0)
            System.out.println("negatif değer girilmedi.");
        else
            System.out.printf("%d negatif sayı girildi, sayılar toplamı: %d%n",negCount, negSum);

    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının basamak sayısını döndüren countDigits isimli metodu
 	NumberUtil isimli sınıf içerisinde yazınız ve aşağıdaki kod ile test ediniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023,
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        CountDigitsTest.run();
    }
}
class CountDigitsTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.countDigits(val);

            System.out.printf("%d sayısının basamak sayısı:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının basamak sayısı:%d%n", NumberUtil.countDigits(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {
    public static int countDigits(int val)
    {
        val = Math.abs(val);
        int count = 0;

        if (val < 10)
            return ++count;

        while (val != 0) {
            val /= 10;
            ++count;
        }

        return count;
    }
}

class NumberUtil {
	public static int countDigits(int val)
	{
		int count = 0;

		do {
			++count;
			val /= 10;
		} while (val != 0);

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının basamakları toplamını döndüren sumDigits isimli metodu
 	NumberUtil isimli sınıf içerisinde yazınız ve aşağıdaki kod ile test ediniz. Metot negatif sayılar için basamakları
 	toplamını pozitif olarak döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 26.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        SumDigitsTest.run();
    }
}
class SumDigitsTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.sumDigits(val);

            System.out.printf("%d sayısının basamakları toplamı:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının basamakları toplamı:%d%n", NumberUtil.sumDigits(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int sumDigits(int val)
    {
        val = Math.abs(val);

        int sum = 0;
        while (val != 0) {
            sum += val % 10;
            val /= 10;
        }

        return sum;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının tersini döndüren reversed isimli metodu NUmberUtil
 	sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.

 	123 -> 3 -> 3 * 10 + 2 = 32 -> 32 * 10 + 1 = 321
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        ReversedTest.run();
    }
}
class ReversedTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        System.out.print("Bir sayı giriniz:");
        int val;

        while ((val = Integer.parseInt(kb.nextLine())) != 0) {
            int count = NumberUtil.reversed(val);

            System.out.printf("%d sayısının tersi:%d%n", val, count);
            System.out.print("Bir sayı giriniz:");
        }

        System.out.printf("0 sayısının tersi:%d%n", NumberUtil.reversed(0));
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int reversed(int val)
    {
        int result = 0;

        while (val != 0) {
            result = result *  10 + val % 10;
            val /= 10;
        }

        return result;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden a ve b değerleri için a'nın b-inci kuvvetini döndüren
 	pow isimli metodu NumberUtil sınıfı içerisinde yazınız.
 	 	Açıklamalar:
 	 	- Math sınıfının pow metodu kullanılmayacaktır
 	 	- Metot b'nin negatif değerleri için 1 değerine geri dönecektir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        ReversedTest.run();
    }
}
class ReversedTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        while (true) {
            System.out.print("tabanı giriniz:");
            int a = Integer.parseInt(kb.nextLine());

            if(a == 0)
                break;

            System.out.print("üstü giriniz:");
            int b = Integer.parseInt(kb.nextLine());
            System.out.printf("%d üzeri %d = %d%n", a, b, NumberUtil.pow(a,b));
        }
        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class NumberUtil {
    public static int pow(int a, int b)
    {
        if (b < 0)
            return 1;

        int result = 1;

        for (int i = 0; i < b; ++i)
            result *= a;

        return result;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı bir sayının Armstrong sayısı olup olmadığını test eden isArmstrong isimli
 	metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
 	 	 Açıklamalar:
 	 	 - Bir sayının her basamağının sayının basamak sayıncı kuvvetleri toplandığında sonuç sayının kendisine eşitse bu sayıya
 	 	 Armstrong sayısı denir. Örneğin:

 	 	 153 -> 1 * 1 * 1 + 5 * 5 * 5 + 3 * 3 * 3 = 153

 	 	 - Kuvvet alma işlemi için yukarıda yazılmış olan pow metodu kullanılacaktır

 	 	 - Sayı negatif ise Armstrong sayısı kabul etmeyiniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsArmstrongTest {
    public static void run()
    {
        for (int n = 0; n <= 9999999; ++n)
            if (NumberUtil.isArmstrong(n))
                System.out.println(n);
    }
}

class NumberUtil {
    public static boolean isArmstrong(int val)
    {
        if (val < 0)
            return false;

        int temp = val;
        int result = 0;
        int countDigits = countDigits(val);

        while (temp != 0) {
            result += pow(temp % 10, countDigits);
            temp /= 10;
        }

        if(val == result)
            return true;

        return false;
    }
    public static int pow(int a, int b)
    {
        int result = 1;

        while (b-- > 0)
            result *= a;

        return result;
    }
    public static int countDigits(int val)
    {
        int count = 0;

        do {
            ++count;
            val /= 10;
        } while (val != 0);

        return count;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı long türden bir sayının asal olup olmadığını test eden isPrime isimli
 	metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
 	Kural: Bir sayı karekökünden küçük olan asal sayıların hiç birisine bölünemiyorsa asaldır.
 	(Hızlı versiyon)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 27.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsPrimeTest {
    public static void run()
    {
        for (int i = -10; i <= 100; ++i)
            if (NumberUtil.isPrime(i))
                System.out.printf("%d ", i);

        System.out.println();
        System.out.println(NumberUtil.isPrime(1_000_003));

        System.out.println(NumberUtil.isPrime(3_728_803_592_870_153_407L));
    }
}

class NumberUtil {
    public static boolean isPrime(long val)
    {
        if (val < 2)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden bir n değeri için n-inci asal sayıyı döndüren getPrime
 	isimli metodu yazınız ve aşağıdaki kod ile test ediniz.
 	Açıklamalar:
 		- isPrime metodunu kullanınız
 	  	- isPrime metodunun hızlı olan versiyonunu kullandığınız bilinciyle yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        GetPrimeTest.run();
    }
}
class GetPrimeTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());


            if (n < 1)
                return;

            System.out.printf("%d. asal sayı:%d%n", n, NumberUtil.getPrime(n));
        }
    }
}

class NumberUtil {
    public static int getPrime(int n)
    {
        int count = 0;
        int result = 0;

        for (int i = 2; count != n; ++i)
            if (isPrime(i)) {
                ++count;
                result = i;
            }

        return result;

    }

    public static boolean isPrime(long val)
    {
        if (val < 2)
            return false;

        if (val % 2 == 0)
            return val == 2;

        if (val % 3 == 0)
            return val == 3;

        if (val % 5 == 0)
            return val == 5;

        if (val % 7 == 0)
            return val == 7;

        for (long i = 11; i * i <= val; i += 2)
            if (val % i == 0)
                return false;

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının faktoriyel değerini döndüren factorial isimli
	metodu NumberUtil sınıfı içersinde yazınız ve aşağıdaki kodu ile test ediniz.

	0! = 1
	1! = 1
	1! 1 * 2

	...

	n! = 1 * 2 * ... * (n - 1) * n
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
----------------------------------------------------------------------------------------------------------------------*/
class FactorialTest {
    public static void run()
    {
        int n = 13;

        for (int i = 0; i <= n; ++i)
            System.out.printf("%d! = %d%n", i, NumberUtil.factorial(i));
    }
}

class NumberUtil {
    public static int factorial(int val)
    {
        int result = 1;

        for (int i = 2; i <= val; ++i)
            result *= i;

        return result;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı n sayısı için n-inci Fibonacci sayısını döndüren getFibonacciNumber
	isimli metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
	Açıklama:
		- Fibonacci sayıları:
		0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        GetFibonnaciTest.run();
    }
}
class GetFibonnaciTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            if (n < 1)
                break;

            System.out.printf("%d. Fibonacci sayısı:%d%n", n, NumberUtil.getFibonacciNumber(n));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {
    public static int getFibonacciNumber(int n)
    {

        if (n < 0)
            return 0;

        int prev2 = 0, prev1 = 1;

        if (n < 2)
            return n - 1;

        for (int i = 2; i < n; ++i) {
            int temp = prev1;
            prev1 += prev2;
            prev2 = temp;
        }

        return prev1;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden sayıdan büyük ilk Fibonacci sayısına geri dönen
	getNextFibonacciNumber isimli metodu yazınız ve aşağıdaki kod ile test ediniz

	0 1 1 2 3 5 8 13 21 34 ...
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.02.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        GetNextFibonnaciTest.run();
    }
}
class GetNextFibonnaciTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());


            if (n < -999)
                break;

            System.out.printf("%d sayısından büyük ilk Fibonacci sayısı:%d%n", n, NumberUtil.getNextFibonacciNumber(n));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {

    public static int getNextFibonacciNumber(int val)
    {
        if (val < 0)
            return 0;

        int prev2 = 0, prev1 = 1;
        int result = prev1 + prev2;

        for (;;) {

            prev2 = prev1;
            prev1 = result;

            if (result > val )
                return result;

            result = prev1 + prev2;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden yıl değerinin artık yıl olup olmadığını test eden isLeapYear
	isimli metodu yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 03.03.2023
----------------------------------------------------------------------------------------------------------------------*/
class IsLeapYearTest {
    public static void run()
    {
        for (int y = 1999; y < 2023; ++y)
            if (DateUtil.isLeapYear(y))
                System.out.printf("%d ", y);

        System.out.println();
    }
}

class DateUtil {
    public static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin geçerli bir tarih
	olup olmadığını test eden isValidDate isimli metodu yazınız aşağıdaki kod ile test ediniz
	(İleride daha iyi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 03.03.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        DateUtilTest.run();
    }
}
class DateUtilTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Gün?");
            int day = Integer.parseInt(kb.nextLine());

            if (day == 0)
                break;

            System.out.print("Ay?");
            int month = Integer.parseInt(kb.nextLine());

            System.out.print("Yıl?");
            int year = Integer.parseInt(kb.nextLine());

            if (DateUtil.isValidDate(day, month, year))
                System.out.printf("%02d/%02d/%04d tarihi geçerlidir%n", day, month, year);
            else
                System.out.println("Geçersiz tarih");
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class DateUtil {

    public static boolean isValidDate(int day,int month, int year)
    {
        if(day < 1 || day > 31 || month < 1 || month > 12)
            return false;

        int days = daysOfmonths[month];

        if (month == 2 && isLeapYear(year))
            ++days;

        return day <= days;
    }
    public static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin yılın kaçıncı
	günü olduğunu döndüren getDayOfYear metodu yazınız ve aşağıdaki kod ile test ediniz.
	Açıklamalar:
		- Metot geçersiz bir tarih durumunda -1 değerine geri dönecektir
		- Örnekler:
		01.03.2020 -> 1 + 29 + 31 = 61
		01.03.2021 -> 1 + 28 + 31 = 60
		31.12.202 -> 31 + 30 + ... + 29 + 31 = 366
		31.12.2020 -> 31 + 30 + ... + 28 + 31 = 365
	(İleride daha iyisi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 03.03.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        DateUtilTest.run();
    }
}
class DateUtilTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Gün?");
            int day = Integer.parseInt(kb.nextLine());

            if (day == 0)
                break;

            System.out.print("Ay?");
            int month = Integer.parseInt(kb.nextLine());

            System.out.print("Yıl?");
            int year = Integer.parseInt(kb.nextLine());

            int dayOfYear = DateUtil.getDayOfYear(day, month, year);

            if (dayOfYear != -1)
                System.out.printf("%02d/%02d/%04d tarihi yılın %d. günüdür%n", day, month, year, dayOfYear);
            else
                System.out.println("Geçersiz tarih");
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class DateUtil {

    public static int getDayOfYear(int day, int month, int year)
    {
        if (!isValidDate(day, month, year))
            return -1;

        return day + getTotalDays(month,year);
    }

    public static int getTotalDays(int month, int year)
    {
        int totalDays = 0;

        for (int i = 1; i < month; ++i)
            totalDays += daysOfmonths[i];

        if(month > 2 && isLeapYear(year))
            ++totalDays;

        return totalDays;
    }
    public static boolean isValidDate(int day,int month, int year)
    {
        if(day < 1 || day > 31 || month < 1 || month > 12)
            return false;

        int days = daysOfmonths[month];

        if (month == 2 && isLeapYear(year))
            ++days;

        return day <= days;
    }
    public static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden gün, ay ve yıl bilgilerine ilişkin tarihin aşağıdaki açıklamalara
	göre haftanın hangi gününe geldiğini döndüren getDayOfWeek isimli metodu yazınız ve aşağıdaki kod ile test ediniz
	Açıklamalar:
		- Metot geçersiz bir tarih durumunda -1 değerine geri dönecektir
		- Haftanın günü 1.1.1900 ile verilen tariharasındaki (verilen tarih dahil) gün sayısının 7(yedi) ile bölümünden
		elde edilen kalan ile bulunabilir. Değer 0(sıfır) ise "Pazar", 1(bir) ise "Pazartesi", ... 6(altı) ise "Cumartesi"
		günlerine karşılık gelir
		- 1.1.1900 öncesindeki tarihler geçersizler kabul edilir
		- Parametresi ile aldığı gün, ay ve yıl bilgilerine ilişkin tarihin hafta sonu olup olmadığını test eden isWeekend
		ve hafta içi olup olmadığını test eden isWeekday metotlarını yazınız. Metotlar tarih geçerliliği kontrolü yapmayacaktır
	(İleride daha iyisi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 06.03.2023
 	Son güncelleme: 29.03.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        DateUtilTest.run();
    }
}
class DateUtilTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Gün?");
            int day = Integer.parseInt(kb.nextLine());

            if (day == 0)
                break;

            System.out.print("Ay?");
            int month = Integer.parseInt(kb.nextLine());

            System.out.print("Yıl?");
            int year = Integer.parseInt(kb.nextLine());

            DateUtil.displayDateTR(day, month, year);
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class DateUtil {
    public static int [] daysOfmonths = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, };
                                        //  01  02  03  04  05  06  07  08  09  10  11  12
    public static void displayDateTR(int day, int month, int year)
    {
        int dayOfWeek = getDayOfWeek(day, month, year);
        if (dayOfWeek == -1) {
            System.out.println("Geçersiz tarih");
            return;
        }

        switch (dayOfWeek) {
            case 0:
                System.out.printf("%02d/%02d/%04d Pazar%n", day, month, year);
                break;
            case 1:
                System.out.printf("%02d/%02d/%04d Pazartesi%n", day, month, year);
                break;
            case 2:
                System.out.printf("%02d/%02d/%04d Salı%n", day, month, year);
                break;
            case 3:
                System.out.printf("%02d/%02d/%04d Çarşamba%n", day, month, year);
                break;
            case 4:
                System.out.printf("%02d/%02d/%04d Perşembe%n", day, month, year);
                break;
            case 5:
                System.out.printf("%02d/%02d/%04d Cuma%n", day, month, year);
                break;
            case 6:
                System.out.printf("%02d/%02d/%04d Cumartesi%n", day, month, year);
                break;
        }
        if (isWeekend(day, month, year))
            System.out.println("Bugün kurs var tekrara yaptınız mı?");
        else
            System.out.println("Kurs günü yaklaşıyor. Tekrar yapmayı unutmayınız");
    }
    public static int getDayOfWeek(int day, int month, int year)
    {
        if(!isValidDate(day, month, year) || year < 1900)
            return -1;

        int totalDays = getDayOfYear(day, month, year);

        for (int i = 1900; i < year; ++i) {
            totalDays += 365;

            if (isLeapYear(i))
                ++totalDays;
        }

        return totalDays % 7;
    }

    public static int getDayOfYear(int day, int month, int year)
    {
        if (!isValidDate(day, month, year))
            return -1;

        return day + getTotalDays(month,year);
    }

    public static int getTotalDays(int month, int year)
    {
        int totalDays = 0;

        for (int i = 1; i < month; ++i)
            totalDays += daysOfmonths[i];

        if(month > 2 && isLeapYear(year))
            ++totalDays;

        return totalDays;
    }
    public static boolean isWeekend(int day, int month, int year)
    {
        int dayOfWeek = getDayOfWeek(day, month, year);
        return dayOfWeek == 0 || dayOfWeek == 6;
    }
    public static boolean isWeekday(int day, int month, int year)
    {
        return !isWeekend(day, month, year);
    }
    public static boolean isValidDate(int day,int month, int year)
    {
        if(day < 1 || day > 31 || month < 1 || month > 12)
            return false;

        int days = daysOfmonths[month];

        if (month == 2 && isLeapYear(year))
            ++days;

        return day <= days;
    }
    public static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	Sınıf Çalışması: Parametresi ile aldığı int türden iki sayının "en büyük ortak bölenini" döndüren gcd isimli
 	metodu Numberutil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 06.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

import static java.lang.Math.max;
import static java.lang.Math.min;

public class Main {
    public static void main(String [] args)
    {
        GcdTest.run();
    }
}
class GcdTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Birinci sayıyı giriniz:");
            int a = Integer.parseInt(kb.nextLine());

            System.out.print("İkinci sayıyı giriniz:");
            int b = Integer.parseInt(kb.nextLine());

            int result = NumberUtil.gcd(a, b);

            System.out.printf("obeb(%d, %d) = %d%n", a, b, result);
            if (result == 1)
                break;
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class NumberUtil {
    public static int gcd(int a, int b)
    {
        int devider = min(a,b);

        if (max(a,b) % devider == 0)
            return devider;
        else
            devider /= 2;

        for (;;) {

            if (a % devider == 0 && b % devider == 0)
                return devider;

            --devider;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: Hilesiz bir paranın yazı gelme olasılığının yaklaşık olarak 0.5 olduğunu bulan basit bir simülasyon
	 programı yazınız.

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 14.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        CoinSimulationApp.run();
    }
}
class CoinSimulationApp {
    public static boolean isHead(Random random)
    {
        return random.nextBoolean();
    }
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Kaç Deneme yapılsın: ");
            int n = Integer.parseInt(kb.nextLine());

            if (n == 0)
                break;

            System.out.printf("yazı gelme olasılığı: %f%n",(double)getNumberOfHeads(n) / n);
        }
    }
    public static int getNumberOfHeads(int n)
    {
        Random r = new Random();
        int count = 0;
        for (int i = 0; i < n; ++i)
            if (isHead(r))
                ++count;

        return count;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: İki zar atıldığında zarların çift gelmesi (ikisinin de aynı) olasılığını yaklaşık olarak
	 hesaplayan simülasyon programını yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 14.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        SameDiceProbilitySimulationApp.run();
    }
}
class SameDiceProbilitySimulationApp {
    public static boolean isSame(java.byr.util.Random random)
    {
        return random.nextInt(6) == random.nextInt(6);
    }
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Kaç Deneme yapılsın: ");
            int n = Integer.parseInt(kb.nextLine());

            if (n == 0)
                break;

            System.out.printf("Çift gelme olasılığı: %f%n",(double)getNumberOfSameDice(n) / n);
        }
    }
    public static int getNumberOfSameDice(int n)
    {
        Random r = new Random();
        int count = 0;
        for (int i = 0; i < n; ++i)
            if (isSame(r))
                ++count;

        return count;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazıdan birincisi içerisinde ikincisinden kaç tane olduğunu döndüren
	countString ve büyük küçük harf duyarsız çalışan countStringIgnoreCase isimli metodu yazınız ve aşağıdaki kod
	ile test ediniz:
	Örnek:
	aaa yazısı içerisinde aa dan 2 tane vardır
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 15.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        CountStringTest.run();
    }
}
class CountStringTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {

            System.out.print("Birinci yazıyı giriniz: ");
            String s1 = kb.nextLine();

            if (s1.equals("elma"))
                break;
            System.out.print("Birinci yazıyı giriniz: ");
            String s2 = kb.nextLine();

            System.out.printf(" %s yazısında %s yazısından %d tane var.%n", s1, s2, StringUtil.countString(s1,s2));
            System.out.printf(" %s yazısında %s yazısından %d tane var.%n", s1, s2, StringUtil.countStringIgnoreCase(s1,s2));
        }

    }
}

class StringUtil {

    public static int countString(String s1, String s2)
    {
        int count = 0;
        int index = -1;
        while ((index = s1.indexOf(s2, index + 1)) != -1)
            ++count;

        return count;
    }

    public static int countStringIgnoreCase(String s1, String s2)
    {
        return countString(s1.toLowerCase(), s2.toLowerCase());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden bir kullanıcı adı ve şifre isteyen basit bir ATM uygulamasının bir parçasını aşağıdaki
	açıklamalara göre yazınız.

	 Açıklamalar:
	 - Kullanıcı ad ve şifresi en fazla 3(üç) kez denenebilecektir.

	 - Denemeler sırasında doğru giriş yapılırsa "Giriş başarılı", başarısız denemelerde "Giriş başarısız", 3. denemede de
	 başarısız olunursa "Giriş başarısız . Artık deneme hakkınız bitti" mesajla verilecektir.

	 - Kullanıcı adı ve şifrenin doğruluğu program içerisinde belirlenen bir kullanıcı adı ve şifre ile yapılacaktır

	 - Uygulama genel düşünülerek yapılmalıdır

	 - Örnekte ATM uygulaması sürekli çalışmaktadır

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 21.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        ATMApp.run();
    }
}
class ATMApp {
    public static void run()
    {
        for (;;) {
            ATM atm = new ATM();
        }
    }
}
class Card {
    public String name;
    public String userName;
    public String password;

    public Card ()
    {
    }

    public Card (String fullName, String uName, String pwd)
    {
        //...
        name = fullName;
        userName = uName;
        password = pwd;
    }

    //...
}
class ATM{
    public Card card;
    public Scanner kb;

    public void getCard()
    {
        card = new Card();
        card.name = kb.nextLine();
        card.userName = kb.nextLine();
        card.password = kb.nextLine();
    }

    public boolean checkCard(String uname, String pwd)
    {
        return card.userName.equals(uname) && card.password.equals(pwd);
    }
    public void doWorkForEntry(int n)
    {

        for (int i = 0; i < n; ++i) {
            System.out.print("username: ");
            String uname = kb.nextLine();
            System.out.print("password: ");
            String pwd = kb.nextLine();

            if (checkCard(uname,pwd)) {
                System.out.println("Giriş başarılı. ");
                return;
            }
            else
                System.out.println("Giriş başarısız. ");
        }
        System.out.println("Artık deneme hakkınız bitti.");
    }
    public ATM ()
    {
        kb = new Scanner(System.in);
        getCard();
        doWorkForEntry(3);

    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının tersini döndüren reversed isimli metodu StringUtil sınıfı
	içerisinde yazınız ve aşağıdaki kod ile test ediniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 21.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        ReversedTest.run();
    }
}
class ReversedTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        for (;;) {
            System.out.print("Bir yazı giriniz: ");
            String str = kb.nextLine();

            if (str.equals("elma"))
                break;

            System.out.printf("Yazının tersi : %s%n", StringUtil.reversed(str));
        }
    }
}
class StringUtil {
    public static String reversed(String s)
    {
        int length = s.length();
        String str = "";
        for (int i = 0; i < length; ++i) {
            str += s.charAt(length - 1 - i);
        }
        return str;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden elma girilene kadar alınan yazıların arasında - karakteri olacak şekilde birleştirilmiş
	bir String oluşturan programı yazınız:
	Örneğin: ankara istanbul izmir girilirse -> ankara-istanbul-izmir
	Örneğin: ankara -> ankara
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 21.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        ConcatWithHypenApp.run();
    }
}
class ConcatWithHypenApp {
    public static void run()
    {
        String str = "";
        Scanner kb = new Scanner(System.in);
        for (;;) {
            System.out.print("Yazı giriniz: ");
            String s = kb.nextLine();

            if (s.equals("elma"))
                break;
            if (s.isBlank())
                continue;

            str += s + "-";
        }
        if (!str.isBlank())
            System.out.println(str.substring(0,str.length() - 1));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının ilk harfi büyük geri kalan tüm harfleri küçük olacak ve harf dışı
	karakterler de aynı kalacak şekilde bir yazı döndüren capitalize isimli metodu StringUtil sınıfı içerisinde yazınız
	ve aşağıdaki kod ile test ediniz.
	Örnek: jAVA Programcısı ÇOK çalışmalıdır. -> Java programcısı çok çalışmalıdır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        CapitalizeTest.run();
    }
}
class CapitalizeTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String s = kb.nextLine();
            if ("elma".equals(s))
                break;

            System.out.printf("(%s)%n", StringUtil.capitalize(s));
        }

        System.out.println("Tekrar yapıyor musunuz?");

    }
}
class StringUtil {
    public static String capitalize(String s)
    {
        return s.isEmpty() ? "" : Character.toUpperCase(s.charAt(0)) + s.substring(1).toLowerCase();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının ilk harfi büyük geri kalan tüm harfleri küçük olacak ve harf dışı
	karakterler de aynı kalacak şekilde bir yazı döndüren capitalizeWS isimli metodu StringUtil sınıfı içerisinde yazınız
	ve aşağıdaki kod ile test ediniz. Metot yazının başında boşluk karakterleri olsa bile ilk boşluk olmayan harfi
	büyütecek şekilde yazılacaktır
	Örnek: jAVA Programcısı ÇOK çalışmalıdır. -> Java programcısı çok çalışmalıdır.

	Dikkat: Aşağıdaki örnekte ** belirtilen döngü deyimi koşul ifadesinde && operatörünün kısa devre davranışı kullanılarak
	yazılmıştır. Aksi durumda exception oluşabilir. && operatörünün birinci ve ikinci operandlarına ilişkin ifadeleri yer
	değiştirerek programı çalıştırıp sonucu gözlemleyiniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

import static java.lang.Character.isWhitespace;

public class Main {
    public static void main(String [] args)
    {
        CapitalizeWSTest.run();
    }
}
class CapitalizeWSTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String s = kb.nextLine();
            if ("elma".equals(s))
                break;

            System.out.printf("(%s)%n", StringUtil.capitalizeWS(s));
        }

        System.out.println("Tekrar yapıyor musunuz?");

    }
}
class StringUtil {
      public static String capitalizeWS(String s)
      {
           int i;
           int length = s.length();
           for (i = 0; i < length && isWhitespace(s.charAt(i)); ++i)
               ;

           return i == length ? "" : s.substring(0,i) + Character.toUpperCase(s.charAt(i))  + s.substring(i + 1).toLowerCase();
      }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının sadece başındaki boşluk karakterlerini atan trimLeading ve
	sadece sonundaki boşluk karkaterlerini atan trimTrailing isimli metotları yazınız ve aşağıdaki kod ile test ediniz.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

import static java.lang.Character.*;
public class Main {
    public static void main(String [] args)
    {
        TrimLeadingTrailingTest.run();
    }
}
class TrimLeadingTrailingTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String s = kb.nextLine();
            if ("elma".equals(s))
                break;

            System.out.printf("(%s)%n", StringUtil.trimLeading(s));
            System.out.printf("(%s)%n", StringUtil.trimTrailing(s));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}
class StringUtil {
    public static String trimTrailing(String s)
    {
        int i;

        for (i = s.length() - 1; 0 < i && isWhitespace(s.charAt(i)); --i)
            ;

        return s.substring(0,i);
    }
    public static String trimLeading(String s)
    {
        int i;
        int length = s.length();

        for (i = 0; i < length && isWhitespace(s.charAt(i)); ++i)
            ;
        return s.substring(i);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Aşağıda açıklanan metotları yazınız.

	public static String padLeading(String s, int length, char ch);
	public static String padLeading(String s, int length);
	public static String padTrailing(String s, int length, char ch);
	public static String padTrailing(String s, int length);

	Açıklamalar:
	- padLeading metodunun 3 parametreli overload'u ikinci parametresi ile aldığı length birinci parametresi ile
	aldığının uzunluğundan büyükse yazıyı soldan üçüncü parametresi ile aldığı karakter ile doldurulmuş yeni bir
	String referansına geri dönecektir.
		Örneğin:
		padLeading("ankara", 11, 'x'); çağrısı
		xxxxxankara
		yazısını döndürecektir

	- length uzunluğu yazının uzunluğundan küçük veya eşitse aynı referansa geri dönecektir.
	- padLeading metodunun 2 parametreli overload'u yazıyı soldan space karakteri ile dolduracaktır
	- padTrailin metotşarı benzer şekilde sağdan dolduracak şekilde yazılacaktır
	- Örneği Java 11+ için yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 20.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        PadLeadingTrailingTest.run();
    }
}
class PadLeadingTrailingTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String s = kb.nextLine();

            if ("elma".equals(s))
                break;

            System.out.print("Bir sayı giriniz:");
            int newLength = Integer.parseInt(kb.nextLine());


            System.out.printf("(%s)%n", StringUtil.padLeading(s, newLength, 'x'));
            System.out.printf("(%s)%n", StringUtil.padLeading(s, newLength));
            System.out.printf("(%s)%n", StringUtil.padTrailing(s, newLength, 'x'));
            System.out.printf("(%s)%n", StringUtil.padTrailing(s, newLength));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

class StringUtil {
    public static String padLeading(String text, int length, char ch)
    {
        if (text.length() < length)
            text = (ch + "").repeat(length - text.length()) + text;

        return text;
    }
    public static String padLeading(String text, int length)
    {
        return padLeading(text, length,' ');
    }

    public static String padTrailing(String text, int length, char ch)
    {
        if ( text.length() < length)
            text = text + (ch + "").repeat(length - text.length());

        return text;
    }
    public static String padTrailing(String text, int length)
    {
        return padTrailing(text, length,' ');
    }
}


/*----------------------------------------------------------------------------------------------------------------------
 	 Sınıf Çalışması: Parametresi ile aldığı bir yazının Türkçe pangram olup olmadığını test eden isPangramTR ve
 	 İngilizce pangram olup olmadığını test eden isPangramEN isimli metotları yazınız ve aşağıdaki kod ile test ediniz.
 	 Pangram: İçerisinde özel isim olmayan anlamlı ve ilgili dilin alfabesinin tüm karakterlerini içeren cümlelere denir.

 	 Programda özel isim ve anlamlı olması durumunu dikkate almayacaktır

  	 İnglizce: The quick brown fox jumps over the lazy dog.
  	 Türkçe: Pijamalı hasta yağız şoföre çabucak güvendi.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 20.03.2023
 	Son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        IsPangramENTRTest.run();
    }
}
class IsPangramENTRTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Input a text:");
            String s = kb.nextLine();

            if ("quit".equals(s) || "elma".equals(s))
                break;

            System.out.println(StringUtil.isPangramTR(s) ? "Pangram" : "Pangram değil");
            System.out.println(StringUtil.isPangramEN(s) ? "Pangram" : "Not a Pangram");
        }
    }
}
class StringUtil {
    public static boolean isPangramTR(String text)
    {
        return isPangram(text.toLowerCase(), "abcçdefgğhıijklmnoöprsştuüvyz");
    }
    public static boolean isPangramEN(String text)
    {
        return isPangram(text.toLowerCase(), "abcdefghijklmnopqrstuvwxyz");
    }
        public static boolean isPangram(String text, String alphabet)
    {
        int len = alphabet.length();

        for (int i = 0; i < len; ++i)
            if (text.indexOf(alphabet.charAt(i)) == -1)
                return false;

        return true;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	 Sınıf Çalışması: Parametresi ile aldığı bir yazının palindrom olup olmadığını test eden isPalindrome metodunu
 	 yazınız ve aşağıdaki kod ile test ediniz.
 	 Palindrom: Yalnızca alfabetik karakterleri tersten okunduğunda aynı olan yazılara palindrom denir. Detaylar
 	 gözardı edilmesi koşuluyla bu tanım yazılabilir.

 	 Örnek:
 	 Ey Edip Adana'da pide ye 	-> eyedipadanadapideye
 	 Anastas mum satsana 		-> anastasmumsatsana
 	 Ali Papila					-> alipapila

 	 Açıklama: Örnek daha önce yazdığımız reverse metodu kullanılarak çok daha basit biçimde yazılabilirdi. Ancak
 	 daha önce de belirtildiği gibi reverse metodunun ilgili versiyonu sürekli String nesnesi yarattığından böyle bir
 	 durumda tercih edilmesi uygun değildir. Ancak ileride reverse metodunu daha etkin hale getirdiğimizde kodu basitleştirmesi
 	 açısından isPalindrome metodunda reverse kullanabileceğiz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

import static java.lang.Character.*;

public class Main {
    public static void main(String [] args)
    {
        IsPalindromeTest.run();
    }
}
class IsPalindromeTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String s = kb.nextLine();

            if ("elma".equals(s))
                break;

            System.out.println(StringUtil.isPalindrome(s) ? "Palindrom" : "Palindrom değil");
        }
    }
}
class StringUtil {
    public static boolean isPalindrome(String s)
    {
        int left = 0;
        int right = s.length() - 1;

        while (left < right) {
            char cLeft = toLowerCase(s.charAt(left));

            if (!isLetter(cLeft)) {
                ++left;
                continue;
            }
            char cRight = toLowerCase(s.charAt(right));

            if (!isLetter(cRight)) {
                --right;
                continue;
            }
            if (cLeft != cRight)
                return false;

            ++left;
            --right;
        }

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
 	 Sınıf Çalışması: Parametresi ile aldığı int türden bir n değeri için n tane rasgele üretilmiş Türkçe alfabedeki
 	 karakterlerden oluşan bir yazı döndüren getRandomTextTR ile n tane rasgele üretilmiş İngilizce alfabedeki karakterlerden
 	 oluşan bir yazı döndüren getRandomTextEN isimli metotları ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        GetRandomTextTRENTest.run();
    }
}
class GetRandomTextTRENTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            System.out.printf("Şifre:%s%n", StringUtil.getRandomTextTR(r, n));
            System.out.printf("Password:%s%n", StringUtil.getRandomTextEN(r, n));
        }
        System.out.println("Tekrar yapıyor musununz?");
    }
}
class StringUtil {
    public static String getRandomTextTR(Random r, int n)
    {
        return getRandomText(r, n, "abcçdefgğhıijklmnoöprsştuüvyzABCÇDEFGĞHIİJKLMNOÖPRSŞTUÜVYZ");
    }

    public static String getRandomTextTR(int n)
    {
        return getRandomTextTR(new Random(), n);
    }

    public static String getRandomTextEN(Random r, int n)
    {
        return getRandomText(r, n, "abcdefghijklmnopqrstuwxvyzABCDEFGHIJKLMNOPQRSTUWXVYZ");
    }

    public static String getRandomTextEN(int n)
    {
        return getRandomTextEN(new Random(), n);
    }

    public static String getRandomText(Random r, int n, String sourceText)
    {
        String result = "";
        int length = sourceText.length();

        for (int i = 0; i < n; ++i)
            result += sourceText.charAt(r.nextInt(length));

        return result;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
 	 Sınıf Çalışması: Parametresi ile aldığı bir yazının içerisindeki en uzun palindromu döndüren getLongestPalindrome
 	 isimli metodu yazınız ve aşağıdaki kod ile test ediniz. Yazı pandrom içermiyorsa metot boş String'e geri dönecektir
 	 Örnek:adaeyedipadanadapideyeecealipapilaanastasmumsatsana
 	 Örnek:adaeeyedipadanadapideyeecealipapilaanastasmumsatsanaaxxxxxxyyyztzt

 	 Açıklama: Örnek daha önce yazdığımız reverse metodu kullanılarak çok daha basit biçimde yazılabilirdi. Ancak
 	 daha önce de belirtildiği gibi reverse metodunun ilgili versiyonu sürekli String nesnesi yarattığından böyle bir
 	 durumda tercih edilmesi uygun değildir. Ancak ileride reverse metodunu daha etkin hale getirdiğimizde kodu basitleştirmesi
 	 açısından isPalindrome metodunda reverse kullanabileceğiz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
 	son güncelleme: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;

import static java.lang.Character.*;
public class Main {
    public static void main(String [] args)
    {
        GetLongestPalindromeTest.run();
    }
}
class GetLongestPalindromeTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir yazı giriniz:");
            String text = kb.nextLine();

            if ("elma".equals(text))
                break;


            System.out.println("En uzun palindrom:");
            System.out.println(StringUtil.getLongestPalindrome(text));

        }
        System.out.println("Tekrar yapıyor musununz?");
    }
}
class StringUtil {

    public static String getLongestPalindrome(String str)
    {
        String maxPalindrome = "";

        for (int i = str.length() - 1; i > 0; --i)
            for (int k = 0; k < i; ++k) {
                String s = str.substring(k, i);

                if (s.length() != 1 && isPalindrome(s) && s.length() > maxPalindrome.length())
                    maxPalindrome = s;
            }

        return maxPalindrome;
    }
    public static boolean isPalindrome(String s)
    {
        int left = 0;
        int right = s.length() - 1;

        while (left < right) {
            char cLeft = Character.toLowerCase(s.charAt(left));

            if (!isLetter(cLeft)) {
                ++left;
                continue;
            }

            char cRight = Character.toLowerCase(s.charAt(right));

            if (!isLetter(cRight)) {
                --right;
                continue;
            }

            if (cLeft != cRight)
                return false;

            ++left;
            --right;
        }

        return true;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Soru: Döngü kullanmadan, String sınıfının Java 11 ile eklenen repeat metodunu da kullanmadan parametresi ile aldığı
	bir karakter ve count değeri için karakteri çoklayan repeat metodunu yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 22.03.2023
----------------------------------------------------------------------------------------------------------------------*/
public class Main {
    public static void main(String [] args)
    {
        System.out.println(StringUtil.repeat(2, 'x'));
        System.out.println(StringUtil.repeat(3, 'x'));
        System.out.println(StringUtil.repeat(4, 'x'));
    }
}

class StringUtil {
    public static String repeat(int n , char ch)
    {
        return String.format("%0" + n + "d", 0).replace('0', ch);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir dizinin elemanlarının toplamını döndüren sum isimli metodu
	ArrayUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

import static byr.util.array.ArrayUtil.*;

public class Main {
    public static void main(String [] args)
    {
        SumIntArrayTest.run();
    }
}

class SumIntArrayTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Min değerini giriniz:");
        int min = Integer.parseInt(kb.nextLine());

        System.out.print("Max değerini giriniz:");
        int max = Integer.parseInt(kb.nextLine());

        Random r = new Random();

        for (;;) {
            System.out.print("Dizinin eleman sayısını giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            int [] a = getRandomArray(r, n, min, max);

            display(a);
            System.out.printf("Toplam:%d%n", sum(a));
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir dizinin elemanlarını parametresi ile aldığı min ve max değerleri
	için [min, max) aralığında rasgele değerlerle dolduran fillRandomArray isimli metodunu ArrayUtil sınıfı içerisinde
	yazınız aşağıdaki kod ile test ediniz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

import static byr.util.array.ArrayUtil.*;

public class Main {
    public static void main(String [] args)
    {
        FillRandomIntArrayTest.run();
    }
}

class FillRandomIntArrayTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Min değerini giriniz:");
        int min = Integer.parseInt(kb.nextLine());

        System.out.print("Max değerini giriniz:");
        int max = Integer.parseInt(kb.nextLine());

        Random r = new Random();

        for (;;) {
            System.out.print("Dizinin eleman sayısını giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            int [] a = new int[n];

            fillRandomArray(r, a, min, max);

            display(a);
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir dizinin elemanlarını ters yüz eden reverse isimli metodu
	başka bir dizi kullanmadan yazınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Random;
import java.util.Scanner;

import static byr.util.array.ArrayUtil.*;

public class Main {
    public static void main(String [] args)
    {
        ReverseIntArrayTest.run();
    }
}
class ReverseIntArrayTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Min değerini giriniz:");
        int min = Integer.parseInt(kb.nextLine());

        System.out.print("Max değerini giriniz:");
        int max = Integer.parseInt(kb.nextLine());

        Random r = new Random();

        for (;;) {
            System.out.print("Dizinin eleman sayısını giriniz:");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            int [] a = getRandomArray(r, n, min, max);

            display(a);
            reverse(a);
            display(a);
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı long türden bir sayının basamaklarından oluşan diziyi döndüren getDigits
	isimli metodu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.
	Açıklama: Metot negatif sayılar için basamak değerlerini pozitif olarak verecektir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 28.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import byr.util.number.NumberUtil;

import java.util.Scanner;

import static byr.util.array.ArrayUtil.*;

public class Main {
    public static void main(String [] args)
    {
        GetDigitsTest.run();
    }
}

class GetDigitsTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Bir sayı giriniz:");
            long n = Long.parseLong(kb.nextLine());

            int [] digits = NumberUtil.getDigits(n);

            display(digits);

            if (n == 0)
                break;
        }

        System.out.println("Tekrar yapıyor musunuz?");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Sayısal loto kupon üreten programı yazınız
	(İleride daha iyisi yazılacaktır)
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 30.03.2023
----------------------------------------------------------------------------------------------------------------------*/
import byr.util.array.ArrayUtil;

import java.util.Random;
import java.util.Scanner;

public class NumericLotteryApp {

    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        for (;;) {
            System.out.print("kupon sayısını giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            System.out.println("-------------------------------");

            for (int i = 0; i < n; ++i)
                ArrayUtil.display(2,NumericLottery.getCoupon(r));

            System.out.println("-------------------------------");
        }

        System.out.println("Tekrar yapıyor musun?");
    }
}



import java.util.Random;

public class NumericLottery {
    public static boolean [] numberFlag;

    public static void fillRandomNumberFlag(Random r)
    {
        numberFlag = new boolean[50];

        int count = 0;
        while (count != 6) {
            int index = r.nextInt(49) + 1;

            if (!numberFlag[index]) {
                numberFlag[index] = true;
                ++count;
            }
        }
    }
    public static int [] getCoupon(Random r)
    {
        int [] a = new int[6];
        fillRandomNumberFlag(r);

        int index = 1;
        for (int i = 0; i < 6; ++i)
             for (;;)
                if (numberFlag[index++]) {
                    a[i] = index;
                    break;
                }


        return a;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Paremetresi ile aldığı long bir sayının en fazla 3(üç) basamaklı ayrılmış sayılarından oluşan
	diziyi döndüren getDigitsInThrees metodunu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz.
	Örnek:1234567 -> 1 234 567
	Örnek: 9876 -> 9 876
	Örnek: 567 -> 567
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 06.04.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Scanner;

import static byr.util.array.ArrayUtil.display;
import static java.lang.Math.abs;
import static java.lang.Math.log10;

public class Main {
    public static void main(String [] args)
    {
        GetDigitsInThreesTest.run();
    }
}
class GetDigitsInThreesTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        for (;;) {
            System.out.print("Bir sayı giriniz:");
            int val = Integer.parseInt(kb.nextLine());

            if (val == 0)
                break;

            display(NumberUtil.getDigitsInThrees(val));
        }
    }
}

class NumberUtil {
    public static int countDigits(long val, int n)
    {
        return val == 0 ? 1 : (int)(log10(abs(val)) / n) +  1;
    }
    public static int [] getDigits(long val,int n)
    {
        int powNum = (int)Math.pow(10,n);

        int [] a = new int[countDigits(val,n)];

        val = abs(val);

        for (int i = a.length - 1; i >= 0; a[i] = (int)(val % powNum), val /= powNum, --i)
            ;

        return a;
    }
    public static int [] getDigitsInThrees(long val)
    {
        return getDigits(val,3);
    }

}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı en fazla üç basamaklı bir sayının Türkçe okunuşunu döndüren numberToText3DigitsTR
	metodunu NumberUtil sınıfı içerisinde yazınız ve aşağıdaki kod ile test ediniz. Metot 3 basamaktan büyük sayılar
	kontrol yapmayacaktır

	123 -> yüzyirmiüç
	345 -> üçyüzkırkbeş
	103 -> yüzüç
	230 -> ikiyüzotuz
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 06.04.2023
----------------------------------------------------------------------------------------------------------------------*/
import java.util.Scanner;


public class Main {
    public static void main(String [] args)
    {
        NumberToText3DigitsTR.run();
    }
}
class NumberToText3DigitsTR {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        for (;;) {
            System.out.print("En fazla Üç basamaklı bir sayı giriniz:");
            int val = Integer.parseInt(kb.nextLine());

            if (val == 0)
                break;

            System.out.printf("sayının okunuşu:%s%n", NumberUtil.numberToText3DigitsTR(val));
        }
    }
}

class NumberUtil {
    public static String [] onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
    public static String [] tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};


    public static String numberToText3DigitsTR(int val)
    {
        int a = val / 100;
        int b = val % 100 / 10;
        int c = val % 10;

        String str = "";

        if (a != 0) {
            if (a != 1)
                str += onesTR[a] + " ";

            str += "yüz ";
        }
        if (b != 0)
            str += tensTR[b] + " ";

        if (c != 0)
            str += onesTR[c];

        return str;
    }

}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden int türden bir n sayısı için değer isteyiniz. n elemanlı bir String dizisi yaratınız.
	bu dizinin her bir elemanını rasgele uzunlukta rasgele üretilmiş Türkçe karakterlerden oluşan yazılarla doldurunuz.
	Bu işlemden sonra StringUtil sınıfı içerisinde yazacağınız parametresi ile aldığı bir String dizisinin elemanlarını,
	yine parametresi aldığı bir	ayraç ile birleştirilmiş bir String'e geri dönen join isimli metodu çağırarak sonucu
	ekrana yazdırınız
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 06.04.2023
----------------------------------------------------------------------------------------------------------------------*/

import java.util.Random;
import java.util.Scanner;
import static byr.util.string.StringUtil.*;

public class Main {
    public static void main(String [] args)
    {
        JoinWithDelimiterApp.run();
    }
}

class JoinWithDelimiterApp {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();

        for (;;) {
            System.out.println("Bir değer giriniz: ");
            int n = Integer.parseInt(kb.nextLine());

            if (n <= 0)
                break;

            int min = 5;
            int max = 10;
            String [] strings = new String[n];
            fillRandomArrayTR(r,strings, min, max);

            System.out.printf("Yazı: (%s)%n", join(strings,"--"));
        }
    }

    public static void fillRandomArrayTR(Random r,String [] strings,int min, int max)
    {
        for (int i = 0; i < strings.length; ++i)
            strings[i] = getRandomTextTR(r,r.nextInt(max - min) + min);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Klavyeden aşağıdaki formatta girilen bilgiyi ayrıştırarak ekrana detayları yazdıran programı
    yazınız.
    <isim>:<gg/aa/yyyy>:<ders adı>:<arasınav>:<final>
    Oğuz Karan:10/09/1976:Matematik:90:78
    Açıklamalar:
    - Bu formata göre kişinin arasınav ve final notlarına arasınav * 0.4 + final * 0.6 formülüne göre geçme notunu da
    yazdırılacaktır

    - Doğum tarihinin hangi güne geldiği de ekrana yazdırılacaktır

    - Geçme notu 50 olarak düşünülmelidir. Geçti veya kaldı bilgisi de ekrana yazdırılacaktır

    - Programda format kontrolü yapılmayacaktır

    Aşağıdaki örnekte RandomStudentInfoStrFactory sınıfında veriler herhangi bir kaynaktan (dosya, veritabanı vs)
    elde edilebilir. Uygulama verinin nnasıl elde edildiğinden bağımsızdır

    Not: Uygulama şu ana kadar gördüklerimize göre yazılmıştır. İleride daha iyisi yazılacaktır
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
 	Çözüm tarihi: 08.04.2023
----------------------------------------------------------------------------------------------------------------------*/

public class StudentInfoParserApp {
    public static void run()
    {
        RandomStudentInfoStrFactory factory = new RandomStudentInfoStrFactory();
        StudentInfo [] randomStudents = new StudentInfo[factory.getNumberOfStudents()];

        for (int i = 0; i < randomStudents.length; ++i) {

            StudentInfo studentInfo = StudentInfo.parse(factory.getRandomStudentInfoStr());
            //...
            randomStudents[i] = studentInfo;
        }

        for (int i = 0; i < randomStudents.length; ++i)
            System.out.println(randomStudents[i].toString());
    }
}



import byr.util.date.DateUtil;

public class StudentInfo {
    public String name;
    public int day;
    public int month;
    public int year;
    public String lectureName;
    public int midTermGrade;
    public int finalGrade;

    public static StudentInfo parse(String str)
    {
        String [] studentInfoStr = str.split("[:]+");

        //... (format kontrolü)

        String [] birthDateInfo = studentInfoStr[1].split("[/]");

        //... (format kontrolü)

        StudentInfo studentInfo = new StudentInfo();

        studentInfo.day = Integer.parseInt(birthDateInfo[0]);
        studentInfo.month = Integer.parseInt(birthDateInfo[1]);
        studentInfo.year = Integer.parseInt(birthDateInfo[2]);
        studentInfo.name = studentInfoStr[0];
        studentInfo.lectureName = studentInfoStr[2];
        studentInfo.midTermGrade = Integer.parseInt(studentInfoStr[3]);
        studentInfo.finalGrade = Integer.parseInt(studentInfoStr[4]);

        return studentInfo;
    }

    public double getGrade()
    {
        return midTermGrade * 0.4 + finalGrade * 0.6;
    }

    public String getBirthDateDayOfWeekTR()
    {
        return DateUtil.getDayOfWeekTR(day, month, year);
    }

    public String getBirthDateInfoTR()
    {
        return DateUtil.getDateTR(day, month, year);
    }

    public String toString()
    {
        double grade = getGrade();
        String status = grade >= 50 ? "Geçti" : "Kaldı";
        String fmt = "{name: %s, birthDate: %s, lectureName: %s, midTermGrade: %d, finalGrade: %d, grade: %d, status: %s}";

        return String.format(fmt, name, getBirthDateInfoTR(), lectureName, midTermGrade, finalGrade, Math.round(grade), status);
    }
}



import java.util.Random;

public class RandomStudentInfoStrFactory {
    public String [] studentsInfo;
    public boolean [] flags;
    public int count;
    public Random random;

    public void init()
    {
        studentsInfo = new String[] {
                "Muammer bayar:10/09/1976:Matematik:40:55",
                "Erkam doğrul:10/07/2001:Matematik:90:65",
                "Cihan Başar:15/01/1997:Matematik:90:95",
                "Bora Bakırtaş:19/01/2000:Matematik:90:99",
        };
        flags = new boolean[studentsInfo.length];
    }

    public RandomStudentInfoStrFactory()
    {
        random = new Random();
        init();
    }

    public int getNumberOfStudents()
    {
        return studentsInfo.length;
    }

    public String getRandomStudentInfoStr()
    {
        if (count == studentsInfo.length)
            return "";
        int index;

        for (;;) {
            index = random.nextInt(studentsInfo.length);

            if (!flags[index])
                break;
        }
        ++count;
        flags[index] = true;

        return studentsInfo[index];
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı dizi dizisinin bir matris olup olmadığını test eden isMatrix metodunu ve
    parametresi ile aldığı dizi dizisinin bir kare matris olup olmadığını test eden isSquareMatrix isimli metodu
    ArrayUtil sınıfı içerisinde yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
import static  byr.util.array.ArrayUtil.*;

import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        IsMatrixSquareMatrixTest.run();
    }
}
class IsMatrixSquareMatrixTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();

        for (;;) {
            System.out.print("Bir sayı giriniz: ");
            int val = Integer.parseInt(kb.nextLine());

            if (val == 0)
                break;

            while (val-- > 0) {
                int m = r.nextInt(8) + 2;
                int n = r.nextInt(8) + 2;
                boolean flag = r.nextBoolean();
                int[][] a = flag ? getRandomMatrix(r, m, n, 0, 100) : getRandomSquareMatrix(r,m,0,100);

                System.out.println("---------------------");
                display(2,a);

                if (ArrayuUtil.isSquareMatrix(a))
                    System.out.printf("Kare Matrix: %d x %d%n", m, m);
                else if (ArrayuUtil.isMatrix(a))
                    System.out.printf("Matrix: %d x %d%n", m, n);
                System.out.println("---------------------");
            }

        }
    }
}

class ArrayuUtil {
    public static boolean isMatrix(int [][] a)
    {
        for (int i = 1; i < a.length; ++i)
            if (a[0].length != a[i].length)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        for (int i = 0; i < a.length; ++i)
            if (a.length != a[i].length)
                return false;

        return true;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı matrisin devriğini (transpose) döndüren transpose isimli metodu yazınız ve
    test ediniz
    Not: Matris mi? değil mi? kontrolü yapılmayacaktır
    Örnek:
    1 2 3
    4 5 6

    1 4
    2 5
    3 6
----------------------------------------------------------------------------------------------------------------------*/
import static  byr.util.array.ArrayUtil.*;

import java.util.Random;
import java.util.Scanner;

public class Main {
    public static void main(String [] args)
    {
        TransposeTest.run();
    }
}
class TransposeTest {
    public static void run()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();

        for (;;) {
            System.out.println("Bir sayı giriniz: ");
            int val = Integer.parseInt(kb.nextLine());

            if (val == 0)
                break;

            while(val -- > 0) {
                int n = r.nextInt(8) + 2;
                int m = r.nextInt(8) + 2;

                int [][] a = getRandomMatrix(r,m,n,0,100);

                System.out.println("----------------");
                display(2,a);
                System.out.println("Transpose: ");
                display(2,ArrayuUtil.transpose(a));
                System.out.println("----------------");
            }
        }
    }
}

class ArrayuUtil {
    public static int [][] transpose(int [][] a)
    {
        int [][] r = new int[a[0].length][a.length];

        for (int i = 0; i < r.length; ++i)
            for (int k = 0; k < a.length; ++k)
                r[i][k] = a[k][i];

        return r;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir kare matrisin esas köşegeni (diagonal) üzerinde elemanların toplamını
    döndüren sumDiagonal metodunu yazınız ve test ediniz. Metot matris veya kare matris kontrolü yapmayacaktır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Bir okulda Matematik sınavı ortak olarak yapılıyor olsun. Kaç şube olduğu olduğu ve herbir şubede
    kaç öğrenci olduğu bilgisi klavyeden alınacaktır. Bu işlem sonrasında öğrencilerin notları rasgele belirlenecektir.
    Tüm bu işlemlerden sonra Matematik sınavı için herbir şubenin ayrı ayrı not ortalamaları ile okulun ortalamasını bulan
    basit bir simülasyon programı yazınız

    Not: İlerde daha iyi şekilde yazılacaktır
----------------------------------------------------------------------------------------------------------------------*/



/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/