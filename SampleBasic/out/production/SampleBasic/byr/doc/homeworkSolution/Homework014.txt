/*----------------------------------------------------------------------------------------------------------------------
    Homework-014
    verilen ders: 39-03-07-2xxx
    çözülen ders: --

    Soru: Doldurulmuş bir Sudoku’nun geçerli olup olmadığını belirleyen programı aşağıdaki açıklamaya göre
    yazınız.

    Açıklama:
    Sudoku oyunu Sudoku isimli bir sınıfla temsil edilecektir. Sınıfın 9X9’luk bir matris veri elemanı vardır.
    Başlangıç metodu bu matrisi tahsis eder, read metodu klavyeden sayıları okuyarak matrise yerleştirir. Sınıfın
    static olmayan isValid metodu da geçerlilik testini yapmaktadır. Örneğin:

    package org.csystem.games.sudoku;

    public class Sudoku {
        private int[][] m_sdm;

        public Sudoku()
        {
            m_sdm = new int[9][9];
        }

        public void read()
        {
            // Klavyeden okuma yap ve matrise yerleştir
        }

        public boolean isValid()
        {
            //Geçerlilik kontrolü yap
        }
        //...
    }

    - Sınıfa gerekli metotları ekleyebilirsiniz. Test işlemini şöyle bir kod ile yapabilirsiniz:

    package org.csystem.games.sudoku;

    class App{
        public static void main(String [] args)
        {
            Sudoku sd = new Sudoku();

            sd.read();

            if (sd.isValid())
                System.out.println(“Geçerli”);
            else
                System.out.println(“Geçerli değil”);
        }
    }

    - Geçerli Sudoku sayılarını bir dosyaya yazıp bunu okuma sırasında kopyala-yapıştır yapabilirsiniz. Sayıları tek
    tek elle girmeye çalışmayınız...

    C ve Sistem Programcıları Derneği
    Java ile Nesne Yönelimli Programlama
    Çalışma Soruları
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	 Question-01
	 çözüm tarihi: 18.05.2023
----------------------------------------------------------------------------------------------------------------------*/

public class Main {
    public static void main(String [] args)
    {
        Sudoku sd = new Sudoku();

        sd.read();

        if (sd.isValid())
            System.out.println("Geçerli");
        else
            System.out.println("Geçerli Değil");
    }
}


import java.util.Scanner;

public class Sudoku {
    private final int [][] m_sdm;

    private boolean checkColumns()
    {
        for (int[] col : m_sdm) {
            boolean [] numbers = new boolean[10];

            for (int k = 0; k < col.length; ++k)
                if (!numbers[col[k]])
                    numbers[col[k]] = true;
                else
                    return false;
        }
        return true;
    }


    private boolean checkRows()
    {

        for (int i = 0; i < m_sdm[0].length; ++i) {
            boolean [] numbers = new boolean[10];

            for (int k = 0; k < m_sdm.length; ++k)
                if (!numbers[m_sdm[k][i]])
                    numbers[m_sdm[k][i]] = true;
                else
                    return false;
        }
        return true;
    }
    // 9x9 sudoku için yazılmıştır, genelleştirilebilir
    private boolean checkSmallMatrices()
    {
        for (int row = 0; row <= m_sdm.length - 3; row += 3)
               for (int col = 0; col <= m_sdm[0].length - 3; col += 3) {
                   boolean [] numbers = new boolean[10];

                   for (int i = row; i < row + 3; ++i)
                       for (int k = col; k < col + 3; ++k)
                           if (!numbers[m_sdm[i][k]])
                               numbers[m_sdm[i][k]] = true;
                           else
                               return false;
               }

        return true;
    }

    public Sudoku()
    {
        m_sdm = new int[9][9];
    }

    public void read()
    {
        Scanner kb = new Scanner(System.in);
        for (int i = 0; i < m_sdm.length; ++i)
            for (int k = 0; k < m_sdm[i].length; ++k){
                System.out.printf("%d. satır %d. sütun:", i + 1 , k + 1);
                m_sdm[i][k] = Integer.parseInt(kb.nextLine());
            }

    }

    public boolean isValid()
    {
        return checkColumns() && checkRows() && checkSmallMatrices();
    }
}
